package com.example.flight_reservation_app_02.util;

import java.io.FileOutputStream;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.example.flight_reservation_app_02.entity.Passenger;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

@Component
public class PDFGenerator {
	
	@Autowired
	Passenger passenger;
	
//	private static String FILE = "C:/Users/hp/Desktop/my.pdf";
//    private static String FILE = "C:\\Users\\hp\\Desktop/my.pdf";
//	public String filePath = "G:\\Java\\SpringBoot_02\\workspace-spring-tool-suite-4-4.9.0.RELEASE"
//			+ "\\flight_reservation_app_02\\tickets\\" + "ticket" + passenger.getId() + ".pdf";
	public String filePath = "G:\\Java\\SpringBoot_02\\workspace-spring-tool-suite-4-4.9.0.RELEASE"
			+ "\\flight_reservation_app_02\\tickets\\";
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

	public void generatePDF(String filePath, String name, String emailId, String phone, String operatingAirlines,
			String departureCity, String arrivalCity, String estimatedDepartureTime) {
//        addTitleAndTable(document, name, emailId, phone, departureDate, departureCity, arrivalCity);
//    	public static void main(String[] args) {
		try {
			Document document = new Document();
			PdfWriter.getInstance(document, new FileOutputStream(filePath));
			document.open();
			addMetaData(document);
			addTitleAndTable(document, name, emailId, phone, operatingAirlines, departureCity, arrivalCity,
					estimatedDepartureTime);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// iText allows to add metadata to the PDF which can be viewed in your Adobe
	// Reader
	// under File -> Properties
	private static void addMetaData(Document document) {
		document.addTitle("My first PDF");
		document.addSubject("Using iText");
		document.addKeywords("Java, PDF, iText");
		document.addAuthor("Lars Vogel");
		document.addCreator("Lars Vogel");
	}

	private static void addTitleAndTable(Document document, String name, String emailId, String phone,
			String operatingAirlines, String departureCity, String arrivalCity, String estimatedDepartureTime)
			throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Flight Ticket Reservation", catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("Report generated by: " + "Flight Reservation Company: " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$
																											// //$NON-NLS-3$
				smallBold));

		addEmptyLine(preface, 3);

		document.add(preface);
		document.add(Chunk.NEWLINE);
		document.add(Chunk.NEWLINE);

		PdfPTable table1 = new PdfPTable(2);
		table1.setWidthPercentage(100);

		PdfPCell c1 = new PdfPCell(new Phrase("Passenger Details"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		c1.setColspan(2);
		table1.addCell(c1);

		table1.addCell("Passenger Name:");
		table1.addCell(name);
		table1.addCell("Email Id:");
		table1.addCell(emailId);
		table1.addCell("Phone Num:");
		table1.addCell(phone);

		document.add(table1);

		addEmptyLine(preface, 1);
		addEmptyLine(preface, 1);
		document.add(Chunk.NEWLINE);
		document.add(Chunk.NEWLINE);
		document.add(Chunk.NEWLINE);
		document.add(Chunk.NEWLINE);

		PdfPTable table2 = new PdfPTable(2);
		table2.setWidthPercentage(100);

		PdfPCell c2 = new PdfPCell(new Phrase("Flights Details"));
		c2.setHorizontalAlignment(Element.ALIGN_CENTER);
		c2.setColspan(2);
		table2.addCell(c2);

		table2.addCell("Operating Airlines:");
		table2.addCell(operatingAirlines);
		table2.addCell("Departure City:");
		table2.addCell(departureCity);
		table2.addCell("Arrival City:");
		table2.addCell(arrivalCity);
		table2.addCell("Estimated Depaeture Time:");
		table2.addCell(estimatedDepartureTime);

		document.add(table2);

		document.close();

	}

	private static void createTable(Section subCatPart) throws BadElementException {
		PdfPTable table = new PdfPTable(3);

		// t.setBorderColor(BaseColor.GRAY);
		// t.setPadding(4);
		// t.setSpacing(4);
		// t.setBorderWidth(1);

		PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Table Header 2"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Table Header 3"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		table.setHeaderRows(1);

		table.addCell("1.0");
		table.addCell("1.1");
		table.addCell("1.2");
		table.addCell("2.1");
		table.addCell("2.2");
		table.addCell("2.3");

		subCatPart.add(table);

	}

	private static void createList(Section subCatPart) {
		List list = new List(true, false, 10);
		list.add(new ListItem("First point"));
		list.add(new ListItem("Second point"));
		list.add(new ListItem("Third point"));
		subCatPart.add(list);
	}

	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
}
